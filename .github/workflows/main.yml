name: Docker Image CI

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_TAG: "latest"
  PROJECT_PATH: "/home/ubuntu/blog/"

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Build project
        run: docker-compose build
      - name: flake8
        run: docker-compose run --entrypoint="" blog flake8 .
      - name: black test
        run: docker-compose run --entrypoint="" blog black . --check
      - name: Migration check
        run: docker-compose run --entrypoint="" blog python manage.py makemigrations --check
#      - name: Tests
#        run: docker-compose run --entrypoint="" blog python manage.py test
    services:
      postgres:
        image: mushroom3/django-blog-db:latest
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_PASSWORD: postgres
  push:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2.3.1
        with:
          key: ${{ secrets.AWS_PEM }}
          known_hosts: 'empty'

      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.AWS_HOST }} >> ~/.ssh/known_hosts

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build the Docker image
        id: docker_build
        run: |
          docker-compose -f prod.yml build --pull
          docker-compose -f prod.yml push

      - name: Build the Docker image in the aws server
        uses: garygrossgarten/github-action-ssh@release
        with:
          command: |
            cd ${{ env.PROJECT_PATH }}
            export DOCKER_REGISTRY=$DOCKER_REGISTRY
            export DOCKER_TAG=$DOCKER_RELEASE_IMAGE
            docker-compose -f prod.yml stop web celery nginx
            docker-compose -f prod.yml rm -f
            docker-compose -f prod.yml pull
            docker-compose -f prod.yml up -d
            docker logout
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          privateKey: ${{ secrets.AWS_PEM }}
